(3.91*283+3.96*196)/(283+196)
5-2.62
s<-sqrt(0.0495)
iq <- 4.12-3.82
s > iq
sqrt(0.0495) > 4.12-3.82
5-2.62
(3.91*283+3.95*196)/(283+196)
(3.95*283+3.91*196)/(283+196)
3.95*196+3.91*283
1880.73/479
# Chunk 1
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(openintro)
library(tidyverse)
# Chunk 2
# Here you can load in and clean the census data (you may need to do the cleaning in a separate R script).
census_data <- read_csv("gss_clean.csv")
# You may need additional chunks, in case you want to include some of the cleaning output.
# Chunk 3
# Here you can load in and clean the survey data (you may need to do the cleaning in a separate R script).
# First, if you don't already have it, install the devtools package:
# install.packages("devtools")
# Now use devtools to install the cesR package directly from Github:
# devtools::install_github("hodgettsp/cesR")
# Load it like any other package:
#library(cesR)
# There are many different CES datasets, and they have unique codes.
# See them with the get_cescodes() function:
#get_cescodes()
# Now pick one, let's try ces2019_phone
#get_ces("ces2019_phone")
#survey_data <- ces2019_phone
# Alternative to what is in the comments above, I have locally loaded
# and (mildly) cleaned the CES2019 phone data and have included it in here.
# We can load it in:
survey_data <- read_csv("ces2019-phone_clean.csv")
# Chunk 4
#### You will need to update/clean the code below based off the variables you want to use in your poststratification.
survey_data <-
survey_data %>%
mutate(age = 2019-q2,
vote_liberal = ifelse(q11==1, 1, 0)) %>%
select(age, vote_liberal)
census_data <- census_data %>%
mutate(age=round(age)) %>%
select(age)
# Chunk 5
# Use this to calculate some summary measures.
# Chunk 6
# Use this to create some plots. Should probably describe both the sample and population.
# Chunk 7
# Creating the Model
model <- lm(vote_liberal ~ age, data=survey_data)
# Model Results (to Report in Results section)
# summary(model)
# OR
# broom::tidy(model)
### Don't show the results/output here...
# Creating the Model
model <- glm(vote_liberal ~ age, data=survey_data, family="binomial")
# Here I will perform the post-stratification calculation
census_data_counts <- census_data %>%
group_by(age) %>%
summarise(n=n())
census_data_counts$estimate <-
model %>%
predict(newdata = census_data_counts)
View(census_data_counts)
census_data_counts$estimate <-
model %>%
predict(newdata = census_data_counts, type=response)
census_data_counts$estimate <-
model %>%
predict(newdata = census_data_counts, type="response")
View(census_data)
View(census_data_counts)
census_data_counts$estimate2 <-
model %>%
exp(predict(newdata = census_data_counts))/(1+exp(predict(newdata = census_data_counts)))
census_data_counts$estimate2 <-
model %>%
exp(predict(newdata = census_data_counts))
# Here I will perform the post-stratification calculation
census_data_counts <- census_data %>%
group_by(age) %>%
summarise(n=n())
census_data_counts$estimate2 <-
model %>%
exp(predict(newdata = census_data_counts))
# Here I will perform the post-stratification calculation
census_data_counts <- census_data %>%
group_by(age) %>%
summarise(n=n())
census_data_counts$estimate <-
model %>%
predict(newdata = census_data_counts)
census_data_counts %>%
mutate(liberal_predict_prop = estimate*n) %>%
summarise(liberal_predict = sum(liberal_predict_prop)/sum(n))
# Here I will perform the post-stratification calculation
census_data_counts <- census_data %>%
group_by(age) %>%
summarise(n=n())
census_data_counts$estimate <-
model %>%
predict(newdata = census_data_counts)
census_data_counts %>%
mutate(liberal_predict_prop = (exp(estimate)/(1+exp(estimate)))*n) %>%
summarise(liberal_predict = sum(liberal_predict_prop)/sum(n))
# Here I will perform the post-stratification calculation
census_data_counts <- census_data %>%
group_by(age) %>%
summarise(n=n())
census_data_counts$estimate <-
model %>%
predict(newdata = census_data_counts, type="response")
census_data_counts %>%
mutate(liberal_predict_prop = estimate*n) %>%
summarise(liberal_predict = sum(liberal_predict_prop)/sum(n))
